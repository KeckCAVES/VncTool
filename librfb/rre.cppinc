/*
 *  Copyright (C) 2002 RealVNC Ltd.
 *  Copyright (C) 1999 AT&T Laboratories Cambridge.  All Rights Reserved.
 *
 *  This is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this software; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
 *  USA.
 */

/*
 * rre.cppinc - handle RRE encoding.
 *
 * This file shouldn't be compiled directly.  It is included multiple times by
 * rfbproto.c, each time with a different definition of the macro BPP.  For
 * each value of BPP, this file defines a function which handles an RRE
 * encoded rectangle with BPP bits per pixel.
 */

#define handleRREBPP CONCAT2E(handleRRE,BPP)
#define rfbCARDBPP   CONCAT2E(rfbCARD,BPP)



bool RFBProtocol::handleRREBPP(int rx, int ry, size_t rw, size_t rh)
{
    rfbRREHeader hdr;
    memset(&hdr, 0, sizeof(hdr));

    if (!this->readFromRFBServer(&hdr, sz_rfbRREHeader))
    {
        if (isOpen) this->errorMessage("RFBProtocol::handleRREBPP", "socket read error");
        return false;
    }
    else
    {
        hdr.nSubrects = Swap32IfLE(hdr.nSubrects);

        rfbCARDBPP pix;
        if (!this->readFromRFBServer(&pix, sizeof(pix)))
        {
            if (isOpen) this->errorMessage("RFBProtocol::handleRREBPP", "socket read error");
            return false;
        }
        else
        {
            this->fillRect(mapColor(pix), rx, ry, rw, rh);

            for (rfbCARD32 i = 0; i < hdr.nSubrects; i++)
            {
                if (!this->readFromRFBServer(&pix, sizeof(pix)))
                {
                    if (isOpen) this->errorMessage("RFBProtocol::handleRREBPP", "socket read error");
                    return false;
                }
                else
                {
                    rfbRectangle subrect;
                    memset(&subrect, 0, sizeof(subrect));

                    if (!this->readFromRFBServer(&subrect, sz_rfbRectangle))
                    {
                        if (isOpen) this->errorMessage("RFBProtocol::handleRREBPP", "socket read error");
                        return false;
                    }
                    else
                    {
                        subrect.x = Swap16IfLE(subrect.x);
                        subrect.y = Swap16IfLE(subrect.y);
                        subrect.w = Swap16IfLE(subrect.w);
                        subrect.h = Swap16IfLE(subrect.h);

                        this->fillRect(mapColor(pix), rx+subrect.x, ry+subrect.y, subrect.w, subrect.h);
                    }
                }
            }
        }
    }

    return true;
}



#undef rfbCARDBPP
#undef handleRREBPP
